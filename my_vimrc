"use Chinese to show help
if version >= 603
	set helplang=cn
	set encoding=utf-8
endif
set nocompatible									"去掉讨厌的有关vi一致性模式，避免以前版本的一些bug和局限 
set t_Co=256										"开启256色支持
set nu											"nu是number的缩写显示行号
set ruler										"显示标尺，状态栏的行数信息

"set scrolloff=6									"上下可视行数

"set guioptions=m									"隐藏菜单栏


" 插入模式下上下左右移动光标  

"---------------------------------------Plugin--------------------------------------
set rtp+=~/.vim/bundle/Vundle.vim					"initialize vundle
filetype off										"required
call vundle#begin()									"start- all plugins below

Plugin 'VundleVim/Vundle.vim'							"使用vundle管理插件
Plugin 'morhetz/gruvbox'							"安装gruvbox主题
Plugin 'altercation/vim-colors-solarized'					"solarized主题
Plugin 'scrooloose/nerdtree'							"NERD tree文件浏览器
Plugin 'Xuyuanp/nerdtree-git-plugin'						"修改文件时，改变状态显示
Plugin 'Valloric/YouCompleteMe'							"代码提醒
Plugin 'Lokaltog/vim-powerline'
Plugin 'vim-syntastic/syntastic'						"代码检查
"Plugin 'Yggdroot/indentLine'
"Plugin 'jiangmiao/auto-pairs'
"Plugin 'tell-k/vim-autopep8'
"Plugin 'scrooloose/nerdcommenter'

call vundle#end()									"stop - all plugins above
"-----------------------------------theme config------------------------------------
colorscheme slate
"colorscheme solarized
set background=dark
let g:solarized_termcolors=256 
let g:solarized_termtrans=1
let g:solarized_contrast="normal"
let g:solarized_visibility="normal"
hi Normal ctermfg=251 ctermbg=none						"ctermfg前景色，ctermbg背景色
"编程主题
func SetTheme()
	set bg=dark                     					"设置背景为黑色
	colorscheme gruvbox            						"设置主题为 gruvbox
	set guioptions=                 					"去掉两边的scrollbar
	set guifont=Monaco:h17          					"设置字体和字的大小
endfunc


syntax enable									"开启高亮
syntax on									"允许制定语法高亮替代默认高亮，自动语法高亮
filetype plugin indent on							"检测文件类型，相关插件及设置

set autoread									"文件被改动时自动载入
set incsearch									"开启实时搜索功能
set ignorecase									"搜索忽略大小写
set wildmenu									"vim命令自动补全
set laststatus=1								"隐藏状态栏，2是显示状态栏
set gcr=a:block-blinkon0							"禁止关闭光标闪烁
set cursorline									"高亮显示当前行
"set cursorcolumn								"高亮显示当前列
set hlsearch									"高亮显示搜索结果
"set nowrap									"禁止折行，set wrap就是自动折行
"set textwidth									"自动换行，当超过设定字数的时候，自动加上换行符
set foldenable									"允许折叠      
set foldmethod=manual								"手动折叠    
set showmatch									"高亮显示匹配的括号

"禁止显示滚动条
set guioptions-=l
set guioptions-=L
set guioptions-=r
set guioptions-=R

"禁止显示菜单和工具条
set guioptions-=m
set guioptions-=T

"----------------------------------NERD Tree config------------------------------------
"nmap <Leader>f:NERDTreeToggle<CR>						"使用NERDTree查看工程文件，设置快捷键
map <F2> :NERDTreeToggle<CR>							"使用F2打开
let NERDTreeWinSize=32								"设置窗口宽度
"let NERDTreeWinPos="right"							"设置窗口位置
"let NERDTreeShowHidden=1							"显示隐藏文件
let NERDTreeMinimalUI=1								"窗口不显示冗余帮助信息
let NERDTreeAutoDeletebBuffer=1							"删除文件时自动删除文件对应的buffer

"----------------------------------nerdtree git config---------------------------------
let g:NERDTreeIndicatorMapCustom = {
    \ "Modified"  : "✹",
    \ "Staged"    : "✚",
    \ "Untracked" : "✭",
    \ "Renamed"   : "➜",
    \ "Unmerged"  : "═",
    \ "Deleted"   : "✖",
    \ "Dirty"     : "✗",
    \ "Clean"     : "✔︎",
    \ 'Ignored'   : '☒',
    \ "Unknown"   : "?"
    \ }


let g:ycm_global_ycm_extra_conf = '~/.vim/bundle/YouCompleteMe/config/.ycm_extra_conf.py'
"nnoremap <leader>jd :YcmCompleter GoToDefinitionElseDeclaration<CR>
"let g:ycm_confirm_extra_conf=0                                     
" 补全功能在注释中同样有效                                         
"let g:ycm_complete_in_comments=1                                   
" 开启tags补全引擎                                                 
"let g:ycm_collect_identifiers_from_tags_files=1                    
" 键入第一个字符时就开始列出匹配项                                 
"let g:ycm_min_num_of_chars_for_completion=1                        
" YCM相关快捷键，分别是\gl, \gf, \gg                                                    
"nnoremap <leader>gl :YcmCompleter GoToDeclaration<CR>              
"nnoremap <leader>gf :YcmCompleter GoToDefinition<CR>               
"nnoremap <leader>gg :YcmCompleter GoToDefinitionElseDeclaration<CR>
""默认配置文件路径"
"let g:ycm_global_ycm_extra_conf = '~/.ycm_extra_conf.py'
"打开vim时不再询问是否加载ycm_extra_conf.py配置"
"let g:ycm_confirm_extra_conf=0
"set completeopt=longest,menu
"python解释器路径"
"let g:ycm_path_to_python_interpreter='/usr/local/bin/python'
"是否开启语义补全"
"let g:ycm_seed_identifiers_with_syntax=1
"是否在注释中也开启补全"
"let g:ycm_complete_in_comments=1
"let g:ycm_collect_identifiers_from_comments_and_strings = 0
"开始补全的字符数"
"let g:ycm_min_num_of_chars_for_completion=2
"补全后自动关机预览窗口"
"let g:ycm_autoclose_preview_window_after_completion=1
" 禁止缓存匹配项,每次都重新生成匹配项"
"let g:ycm_cache_omnifunc=0
"字符串中也开启补全"
"let g:ycm_complete_in_strings = 1
"离开插入模式后自动关闭预览窗口"
"autocmd InsertLeave * if pumvisible() == 0|pclose|endif
"回车即选中当前项"
"inoremap <expr> <CR>       pumvisible() ? '<C-y>' : '\<CR>'
"上下左右键行为"
"inoremap <expr> <Down>     pumvisible() ? '\<C-n>' : '\<Down>'
"inoremap <expr> <Up>       pumvisible() ? '\<C-p>' : '\<Up>'
"inoremap <expr> <PageDown> pumvisible() ? '\<PageDown>\<C-p>\<C-n>' : '\<PageDown>'
"inoremap <expr> <PageUp>   pumvisible() ? '\<PageUp>\<C-p>\<C-n>' : '\<PageUp>'


"----------------------------------set title when new file-----------------------------
autocmd BufNewFile *.py,*.java,*.sh exec ":call SetTitle()"
func SetTitle()
	if &filetype == 'python'
		call append(line("."),"#!/usr/bin/env python3")
		call append(line(".")+1,"# -*- coding: utf-8 -*-")
	endif
endfunc
"----------------------------------when open file-------------------------------------
au BufNewFile,BufRead *.py,*,java exec ":call OpenFile()"
func OpenFile()
  if &filetype == 'python'
	set shiftwidth=4							"设置格式化时制表符占用空格数				
	set ts=4								"ts是tabstop的缩写，设置tab键宽四个空格
	set expandtab								"把制表符扩展为空格
	set softtabstop								"让vim把连续的空格视为一个制表符
	call SetTheme()
  else
	set shiftwidth=2
	set ts=4
  endif
endfunc



"-----------------------------------compile code--------------------------------------

"---------------------------------auto fcitx----------------------------------
let g:input_toggle = 1
function! Fcitx2en()
  let s:input_status = system("fcitx-remote")
  if s:input_status == 2
	let g:input_toggle = 1
	let l:a = system("fcitx-remote -c")
  endif
endfunction

function! Fcitx2zh()
  if &filetype == 'markdown'
  	let s:input_status = system("fcitx-remote")
  	if s:input_status != 2 && g:input_toggle == 1
	  let l:a = system("fcitx-remote -o")
	  let g:input_toggle = 0
    endif
  endif
endfunction

set ttimeoutlen=150
"退出插入模式
autocmd InsertLeave * call Fcitx2en()
"进入插入模式
autocmd InsertEnter * call Fcitx2zh()
"##### auto fcitx end ######
